---
layout: post
title:  "记个帐"
date:   2020-01-23 19:11:26
categories: [other]
---
<div id="main" style="width:800px;height:600px;"></div>

<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js" integrity="sha256-9TvhGliyfFW2O8SvloAhdFQbfjluHQ+vQ7WWWX5Z7oM=" crossorigin="anonymous"></script>

<script>
  function b64ToBuf(str) {
    let encrypted = window.atob(str);
    let len = encrypted.length;
    let buf = new Uint8Array(len);
    for (let i = 0; i < len; i++)
      buf[i] = encrypted.charCodeAt(i);
    return buf.buffer;
  }

  function buf2str(buf) {
    return String.fromCharCode(...new Uint16Array(buf));
  }

  var payload = "AD+uLU9crKVEIR++:";
  let [iv, s] = payload.split(':');
  window.crypto.subtle.importKey(
    "jwk",
    {
      kty: "oct",
      k: window.localStorage.getItem("{{ page.id }}"),
      alg: "A256GCM",
      ext: true,
    },
    {
      name: "AES-GCM",
    },
    false,
    ["encrypt", "decrypt"]
  ).then(key => {
    window.crypto.subtle.decrypt(
      {
        name: "AES-GCM",
        iv: b64ToBuf(iv),
      },
      key,
      b64ToBuf(s)
    ).then(encrypted => {
      const csv = buf2str(encrypted);
      const chart = echarts.init(document.getElementById('main'));
      const category = csv.split('\n')[0].split(',').slice(1);
      const dataset = csv.split('\n').slice(1).reduce((ret, cur) => {
        const cell = cur.split(',');
        if (cell.length <= 1) return ret;
        ret[cell[0]] = cell.slice(1).map(d => +d);
        return ret;
      }, {});
      const option = {
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'shadow'
          }
        },
        legend: {
          data: category
        },
        xAxis: [
          {
            type: 'category',
            data: Object.keys(dataset)
          }
        ],
        yAxis: [
          {
            type: 'value'
          }
        ],
        series: category.map((c, i) => ({
          name: c,
          type: 'bar',
          stack: '总计',
          data: Object.values(dataset).map(d => d[i])
        }))
      };
      chart.setOption(option);
    });
  });
</script>
